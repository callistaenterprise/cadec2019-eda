version: '2.1'
services:
  mysql:
    image: cadec2019/mysql
    build:
      context: mysql
    ports:
     - 3306:3306
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: customer
      MYSQL_USER: mysql
      MYSQL_PASSWORD: secret
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/mysql --user=mysql --password=secret --execute \"SHOW DATABASES;\""]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  zookeeper:
    image: debezium/zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    restart: always
    environment:
      LOG_LEVEL: WARN
  kafka:
    image: debezium/kafka
    ports:
      - "9092:9092"
    restart: always
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      LOG_LEVEL: WARN
    depends_on:
      zookeeper:
        condition: service_started
  order:
    image: cadec2019/order:eventSourcing
    ports:
     - 8080:8080
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_started
  invoicing:
    image: cadec2019/invoicing:eventSourcing
    ports:
     - 8081:8080
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      order:
        condition: service_healthy
      customer:
        condition: service_healthy
  shipping:
    image: cadec2019/shipping:eventSourcing
    ports:
     - 8082:8080
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_started
      order:
        condition: service_healthy
      customer:
        condition: service_healthy
  customer:
    image: cadec2019/customer:eventSourcing
    ports:
     - 8083:8080
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_started
      mysql:
        condition: service_healthy
  inventory:
    image: cadec2019/inventory:eventSourcing
    ports:
     - 8084:8080
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_started
      order:
        condition: service_healthy
